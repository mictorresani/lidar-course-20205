#1. reading the point cloud
#read LAS point cloud
las<-readLAS("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/las/las_area1.laz")
las#plot the point cloud
plot(las)#read only x,y,z

las<-readLAS("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/las/las_area1.laz",select = "xyz" )#read only first return
las<-readLAS("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/las/las_area1.laz",filter = "-keep_first" )  #-keep_last#check if the point cloud is fine
las_check(las)#2 plot the point cloud

plot(las, bg="white" )#if you have structrue from motion data you can plot in RGB
plot(las, color="RGB")#plot specific information of the point cloud e.g. classification
plot(las, color="Classification", bg="white", legend=TRUE )#plot intensity
plot(las, color="Intensity", bg="white", legend=TRUE )#plot point cloud transect

p1 <- c(679368, 5155974)
p2 <- c(679468, 5156074)
transect<-clip_transect(las, p1, p2, width = 5)

library(ggplot2)

library(viridis)
ggplot(payload(transect), aes(X,Z, color=Z  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")#clip the las with the shapefile of a given polygon

library(rgdal)
library(sf)
area_test<-st_read("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/shp/area_shp_test.shp")

plot(area_test)
clipped_las<-clip_roi(las, area_test)
plot(clipped_las)#clip my las with given gps point and given radius
area_circle<-clip_circle(las, x=679368, y=5155974, radius = 50   )
area_circle<-clip_circle(las, x=p1[1], y=p1[2], radius = 50   )
plot(area_circle)#3. classification of the point cloud

transect<-clip_transect(las, p1, p2, width = 5)
ggplot(payload(transect), aes(X,Z, color=Classification  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")#classify point cloud, we use the function classify_ground ()


#classificatipon
classification1<-classify_ground(las, algorithm = pmf(ws=5, th=3) )

transect<-clip_transect(classification1, p1, p2, width = 5)
ggplot(payload(transect), aes(X,Z, color=Classification  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")


ws<-seq(3, 12, 3)
ws
th<-seq(0.1, 2, length.out= length(ws))

classification2<-classify_ground(las, algorithm = pmf(ws=ws, th=th) )
transect<-clip_transect(classification2, p1, p2, width = 5)
ggplot(payload(transect), aes(X,Z, color=Classification  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")



library(RCSF)

classification_csf<-classify_ground(las, algorithm = csf()) #based on Zang et al 2016. 
transect<-clip_transect(classification_csf, p1, p2, width = 5) #we can change the transect width if needed
ggplot(payload(transect), aes(X,Z, color=Classification  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")



#show only the ground point sin 3D
ground<-filter_ground(las)
plot(ground, bg="white")







##2. DTM creation
#dtm_tin
dtm_tin<-rasterize_terrain(las, res = 1, algorithm = tin()) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_tin)
plot(dtm_tin)
setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/dtm")
writeRaster(dtm_tin, "dtm_tin.tiff") #use the .tiff


#dtm_idw
dtm_idw<-rasterize_terrain(las, res = 1, algorithm = knnidw()) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_idw)
plot(dtm_idw)
setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/dtm")
writeRaster(dtm_idw, "dtm_idw.tiff") #use the .tiff


#dtm_kriging no tuning
dtm_kriging<-rasterize_terrain(las, res = 1, algorithm = kriging()) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_kriging)
plot(dtm_kriging)
setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/dtm")
writeRaster(dtm_idw, "dtm_idw.tiff") #use the .tiff

#dtm_kriging k=10
dtm_kriging_k10<-rasterize_terrain(las, res = 1, algorithm = kriging(k=10)) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_kriging_k10)

#dtm_kriging k=150
dtm_kriging_k150<-rasterize_terrain(las, res = 1, algorithm = kriging(k=150)) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_kriging_k150)

#this function allows to create raster of slope and aspect 
dtm_products<-terrain(dtm_tin, v=c("slope", "aspect"), unit="degree" )
plot(dtm_products) #plot both
plot(dtm_products$slope, main="slope")
setwd("")
writeRaster(dtm_products$slope, "C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/slope and aspect/Slope.tiff")



#3.las normalization 

#easy approach 
nlas<-las-dtm_tin
plot(nlas)

transect<-clip_transect(nlas, p1, p2, width = 5) #we can change the transect width if needed
ggplot(payload(transect), aes(X,Z, color=Classification  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")

hist(filter_ground(nlas)$Z, breaks= seq(-20, 20, 0.1)  )

min(nlas$Z)
max(nlas$Z)



nlas_right<-normalize_height(las, tin())
plot(nlas_right)

hist(filter_ground(nlas_right)$Z, breaks= seq(-20, 20, 0.1)  )
hist(filter_ground(nlas_right)$Z, breaks= seq(-1, 1, 0.1)  )

min(nlas_right$Z)
max(nlas_right$Z)


#final fiter
nlas_filtered<-filter_poi(nlas_right, Z>=0, Z<=40 )
plot(nlas_filtered)




#DSM creation

dsm<-rasterize_canopy(las, res=1, algorithm = p2r())
dsm
plot(dsm)

chm<-rasterize_canopy(nlas_filtered, res=1, algorithm = p2r())
plot(chm, main="chm_no filling")

setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/chm")
writeRaster(chm, "chm_2m.tiff")

#adding the filling option1
chm_filled1<-rasterize_canopy(nlas_filtered, res=1, algorithm = p2r(subcircle = 0.2))
plot(chm_filled1, main="chm_filled1")
writeRaster(chm_filled1, "chm_filled1.tiff")

#adding the filling option1
chm_filled2<-rasterize_canopy(nlas_filtered, res=1, algorithm = p2r(subcircle = 0.2,na.fill = tin() )) #use 2 filling, one id based on subcircle and one on filling NA based on DTM algorithm
plot(chm_filled2, main="chm_filled2")
writeRaster(chm_filled2, "chm_filled2.tiff")




#Tree detection and segmentation
library(sf)
tree_top<-locate_trees(las, lmf(ws=5))
tree_top_nlas<-locate_trees(nlas_filtered, lmf(ws=5))

plot(chm_filled2)
plot(st_geometry(tree_top), add=TRUE, pch=3)


tree_top_nlas<-locate_trees(nlas_filtered, lmf(ws=10))
plot(chm_filled2)
plot(st_geometry(tree_top_nlas), add=TRUE, pch=3)


f <- function(x) {x * 0.1 + 3} #create a function that makes a mw that increase from 3 (whan height is 0) and increase of 0.1 for each meter. you can change the 0.1 and increas eto 0.2...
heights <- seq(0,40,5)
ws <- f(heights)
plot(heights, ws, type = "l", ylim = c(0,6))


tree_top_function<-locate_trees(nlas_filtered, lmf(f))
plot(chm_filled2)
plot(st_geometry(tree_top_function), add=TRUE, pch=3)






#tree segmentation
#algorithm that work with point cloud
#dalponte2016
algorithm<-dalponte2016(chm_filled2, tree_top_function)
trees_segmented_dalponte<-segment_trees(nlas_filtered, algorithm)
trees_segmented_dalponte
plot(trees_segmented_dalponte, color="treeID")
tree1<-filter_poi(trees_segmented, treeID==120)
plot(tree1)


algorithm2<-li2012()
trees_segmented<-segment_trees(nlas_filtered, algorithm2)
trees_segmented
plot(trees_segmented, color="treeID")
tree1<-filter_poi(trees_segmented, treeID==120)
plot(tree1)


crown_dalponte<-crown_metrics(trees_segmented_dalponte, func = .stdtreemetrics, geom = "convex") #you can use also concave
plot(crown_dalponte["npoints"])
plot(crown_dalponte["convhull_area"])


#algorithm that work with CHM
crown_dalponte_new<-crown_metrics(trees_segmented_dalponte, func = .stdmetrics_z, geom = "convex") #you can use also concave
crown_dalponte_new

#z: refers to the elevation
#i: refers to the intensity
#rn: refers to the return number
#q: refers to quantile
#a: refers to the ScanAngleRank or ScanAngle
#n: refers to a number (a count)
#p: refers to a percentage


plot(crown_dalponte_new["zsd"])

crown_dalponte_new<-crown_metrics(trees_segmented_dalponte, func = .stdmetrics_z) #you can use also concave
crown_dalponte_new
plot(crown_dalponte_new["zsd"])





#cloud information at cloud level
metric<-cloud_metrics(nlas_filtered,func = .stdmetrics_z )



#cloud information at plot level wit a given point, or adding apolygon
test_points<-st_read("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/shp/punctual_plot.shp")
metric_plot<-plot_metrics(nlas_filtered, func=.stdmetrics_z, radius=20, test_points) #set radius of your plot







#get information at pixel leve

metric_pixel<-pixel_metrics(nlas_filtered,func = .stdmetrics_z, 20 ) #compare to cloud_metric you have to add a numbe rthat is the size of the pizel
plot(metric_pixel)
writeRaster(metric_pixel$zmean, "pixel_metric_mean.tiff")




#CV calculation 
#first build up the function. CV= sd/mean
cv<-function(z){coef_var<-sd(z)/mean(z)    }
new_metric<-pixel_metrics(nlas_filtered, ~cv(z=Z), 10 )
plot(new_metric)




crown_dalponte_new<-crown_metrics(trees_segmented_dalponte, func = .stdmetrics_z, geom="convex") #you can use also concave
crown_dalponte_new$volume<-0.05*(crown_dalponte_new$zmax^2.5)/100  #use with caution!!!! #Some sources suggest values between 0.03 and 0.07 depending on species.
plot(crown_dalponte_new["volume"])





catalog<-readLAScatalog("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/las/area3_lascatalog/start")
plot(catalog)


opt_output_files(catalog)<-paste0("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/data/starting_data/las/", "{*}_classified")
dtm_catalog<-rasterize_terrain(catalog, tin(), res=10)




























#heterogeneity with rasterdiv
library(rasterdiv)
library(raster)
library(raoQarea)

chm_raster<-raster(chm)
dtm_raster<-raster(dtm_kriging)
lista_raster<-list(q,w)

area_test<-shapefile("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/lezioni_e_tesi/Unibz/geomatia e telerilevamento/2022_2023_2024/lezioni/LAB/LiDAR esercitazione/DownloadService/area_shp_test.shp")

#shannon
shannon<-Shannon(chm_raster, window = 3)

#single rao
rao<-paRao(chm_raster, window = 3, method = "classic", simplify=0 )

#plot_both_plots
par(mfrow=c(1,2))
plot(shannon$layer, col =col, main="Shannon")
plot(rao$window.3$alpha.1, col =col, main="Rao Q")


#single rao area, we get a number
rao_area<- paRao(q, window = 3, method = "classic", simplify = 0, area = area_test, field = "id")


#multi_rao
rao_multi<-paRao(lista_raster, window = 3, method = "multidimension", simplify=0 )
par(mfrow=c(1,2))
plot(rao$window.3$alpha.1, col =col)
plot(rao_multi$window.3$alpha.1, col =col)


#multi_rao

rao_multi_area<-paRao(lista_raster, window = 3, method = "multidimension", simplify=0, area = area_test, field = "id" )





##2. DTM creation

#show only the ground point in 3D
ground<-filter_ground(las)
plot(ground, bg="white")

#dtm_tin
dtm_tin<-rasterize_terrain(las, res = 1, algorithm = tin()) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_tin, bg="white")
library(rgl) #to create the title
title3d(main = "DTM TIN", color = "black", line = 2)
plot(dtm_tin)
setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/dtm")
writeRaster(dtm_tin, "dtm_tin.tiff") #use the .tiff


#dtm_idw
dtm_idw<-rasterize_terrain(las, res = 1, algorithm = knnidw()) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_idw, bg="white")
title3d(main = "DTM IDW", color = "black", line = 2)
plot(dtm_idw)
setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/dtm")
writeRaster(dtm_idw, "dtm_idw.tiff") #use the .tiff


#dtm_kriging no tuning
dtm_kriging<-rasterize_terrain(las, res = 1, algorithm = kriging()) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_kriging, bg="white")
title3d(main = "DTM KRIGING", color = "black", line = 2)
plot(dtm_kriging)
setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/dtm")
writeRaster(dtm_idw, "dtm_idw.tiff") #use the .tiff
#dtm_kriging k=10
dtm_kriging_k10<-rasterize_terrain(las, res = 1, algorithm = kriging(k=10)) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_kriging_k10)
#dtm_kriging k=150
dtm_kriging_k150<-rasterize_terrain(las, res = 1, algorithm = kriging(k=150)) #res is in meters, use classification_csf if yoo dont trust your original classification
plot_dtm3d(dtm_kriging_k150)






#this function allows to create raster of slope and aspect 
dtm_products<-terrain(dtm_tin, v=c("slope", "aspect"), unit="degree" )
plot(dtm_products) #plot both
plot(dtm_products$slope, main="slope")
setwd("")
writeRaster(dtm_products$slope, "C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/slope and aspect/Slope.tiff")

#exercise 5?
#create a dtm using a tin() and knnidw() in the other study area (las_area2)
#get slope and aspect 
#save on your local computr the aspect and slope as .tiff




#3.las normalization 
#easy approach 
nlas<-las-dtm_tin
plot(nlas)

p1 <- c(679368, 5155974)
p2 <- c(679468, 5156074)

transect<-clip_transect(nlas, p1, p2, width = 5) #we can change the transect width if needed
ggplot(payload(transect), aes(X,Z, color=Z  ) )+
  geom_point()+
  theme_minimal()+
  scale_color_viridis_c(option="viridis")

hist(filter_ground(nlas)$Z, breaks= seq(-15, 15, 0.1)  )

min(nlas$Z)
max(nlas$Z)


#right approach
nlas_right<-normalize_height(las, tin())
plot(nlas_right)

hist(filter_ground(nlas_right)$Z, breaks= seq(-20, 20, 0.1)  )
hist(filter_ground(nlas_right)$Z, breaks= seq(-1, 1, 0.1)  )

min(nlas_right$Z)
max(nlas_right$Z)


#final fiter
nlas_right_filtered<-filter_poi(nlas_right, Z>=0, Z<=40 )
plot(nlas_filtered)



#exercise 6
#normalize the las2 using the tin() algorithm. 
#filter the points as done before. 



#DSM creation
dsm<-rasterize_canopy(las, res=1, algorithm = dsmtin()) #you can use also the p2r()
dsm
plot(dsm)

chm<-rasterize_canopy(nlas_filtered, res=1, algorithm = dsmtin())
plot(chm, main="chm_no filling")

setwd("C:/Users/MicTorresani/OneDrive - Scientific Network South Tyrol/varie/corsi/physalia/LiDAR 2025/results/chm")
writeRaster(chm, "chm_2m.tiff")

#adding the filling option1 only using the p2r
chm_filled1<-rasterize_canopy(nlas_filtered, res=1, algorithm = p2r(subcircle = 0.2))
plot(chm_filled1, main="chm_filled1")
writeRaster(chm_filled1, "chm_filled1.tiff")

#adding the filling option1
chm_filled2<-rasterize_canopy(nlas_filtered, res=1, algorithm = p2r(subcircle = 0.2,na.fill = tin() )) #use 2 filling, one id based on subcircle and one on filling NA based on DTM algorithm
plot(chm_filled2, main="chm_filled2")
setwd("C:/Users/MicTorresani/Documents/dati_lidar_phisalia")
writeRaster(chm_filled2, "chm_filled2.tiff")


#exercise 7
#create a 2 new CHM with the area2 with a spatial resolution of 2m. one using the dsmtin() and the other using the p2r(subcircle = 0.2,na.fill = tin() )




#Tree detection and segmentation
library(sf)
tree_top<-locate_trees(las, lmf(ws=5))
st_write(tree_top, "tree_top.shp", layer_options = "SHPT=POINTZ")
tree_top_nlas5<-locate_trees(nlas_filtered, lmf(ws=5))
st_write(tree_top_nlas5, "tree_top_nlas5.shp", delete_layer = TRUE, layer_options = "SHPT=POINTZ")

plot(chm_filled2)
plot(st_geometry(tree_top_nlas), add=TRUE, pch=3)


tree_top_nlas10<-locate_trees(nlas_filtered, lmf(ws=10))
plot(chm_filled2)
plot(st_geometry(tree_top_nlas10), add=TRUE, pch=3)


f <- function(x) {x * 0.1 + 3} #create a function that makes a mw that increase from 3 (whan height is 0) and increase of 0.1 for each meter. you can change the 0.1 and increas eto 0.2...
heights <- seq(0,40,5)
ws <- f(heights)
plot(heights, ws, type = "l", ylim = c(0,6))


tree_top_function_right<-locate_trees(nlas_filtered, lmf(f))
st_write(tree_top_function_right, "tree_top_function.shp", delete_layer = TRUE, layer_options = "SHPT=POINTZ")
plot(chm_filled2)
plot(st_geometry(tree_top_function), add=TRUE, pch=3)


#exercise 8
#load the area2
#create a nlas_filtered (with filter 0, 45) in the area 2
#locate trees using  the f function 



